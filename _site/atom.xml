<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Min Yang Jung</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2021-01-18T17:23:41-08:00</updated>
 <id></id>
 <author>
   <name>Min Yang Jung</name>
   <email>contact@minyangjung.com</email>
 </author>

 
 <entry>
   <title>Working with Binary Files</title>
   <link href="/blog/software/tools/2021/01/10/vim-tip-working-with-binary-files/"/>
   <updated>2021-01-10T20:04:54-08:00</updated>
   <id>/blog/software/tools/2021/01/10/vim-tip-working-with-binary-files</id>
   <content type="html">&lt;p&gt;I am a huge fan of vim.  I don’t even know how to quit eclipse :) Whichever system I
happen to work on, the very first tool I always check and customize is vim.  After trying
out a variety of plug-ins and auxilary tools around vim, I settled down with my own vimrc
file and ended up using the exvim as my favorite editor.  Perhaps my own customization
around vim may deserve a separate write-up.&lt;/p&gt;

&lt;p&gt;Anyway, I recently had to work with binary files and learned that vim already provides
a nice way to work with binary files.&lt;/p&gt;

&lt;p&gt;When vim loads up a binry file, its content may look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vim-binary-1.png&quot; alt=&quot;vim-binary-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:%!xxd&lt;/code&gt;, it shows up as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vim-binary-2.png&quot; alt=&quot;vim-binary-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enabling syntax coloring makes it more readable: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:set ft=xxd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vim-binary-3.png&quot; alt=&quot;vim-binary-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, it is possible to directly change hex values on the left side.  Once
changes are completed, we need to go back to the previous mode before updating the file: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:%!xxd -r&lt;/code&gt;.
We can then now save the changes to file by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:w&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may notice an extra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0A&lt;/code&gt; is added to the end of the file that you just updated.  To truncate
the last byte:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;truncate --size=-1 bin_file&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed '$ s/.$//' bin_file&amp;gt; &amp;gt; output_file&lt;/code&gt; (if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;truncate&lt;/code&gt; is not available)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lastly, a couple well known tips that may be useful when working with binary files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To dump a file in the hex format: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hexdump bin_file&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;To diff two binary files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diff &amp;lt;(xxd binary_file1) &amp;lt;(xxd binary_file2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Maker's Schedule, Manager's Schedule</title>
   <link href="/blog/management/2020/08/21/makers-schedule-managers-schedule/"/>
   <updated>2020-08-21T00:00:00-07:00</updated>
   <id>/blog/management/2020/08/21/makers-schedule-managers-schedule</id>
   <content type="html">&lt;p&gt;I just came across an article titled &lt;a href=&quot;http://www.paulgraham.com/makersschedule.html&quot;&gt;maker’s schedule, manager’s schedule&lt;/a&gt;.  It was
published a bit while ago (July 2009).  It describes the two types of schedule – maker’s
and manager’s – and expands the nature of each.  Essentially, the manager’s schedule runs
on hourly basis, whereas the maker’s needs a chunk of time like half a day at least.  The
article also talked about what happens when the two schedules meet and how to best utilize
one’s time in general.&lt;/p&gt;

&lt;p&gt;This article got me thinking, how effectively I have been using my time these days.  My
calendar this week happened to be fairly fragmented – writing technical publication,
working on formal documentation, a bit of coding, developing new
workflows/processes.  There was not much space for me to have quality maker’s
time.  Given that my mind operates with a single thread, such fragmentation is
quite costly for me due to frequent context switches, which comes with high cost.&lt;/p&gt;

&lt;p&gt;One take away for me is to take more deliberate approach to scheduling my time while
balancing out the maker’s and manager’s schedule.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>AI regenerated PAC-MAN</title>
   <link href="/blog/mlai/2020/05/23/ai-generated-pac-man/"/>
   <updated>2020-05-23T00:00:00-07:00</updated>
   <id>/blog/mlai/2020/05/23/ai-generated-pac-man</id>
   <content type="html">&lt;p&gt;Let’s cut to the chase – check out this blog article:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.nvidia.com/blog/2020/05/22/gamegan-research-pacman-anniversary&quot;&gt;PAC-MAN Recreated with AI by NVIDIA Researchers&lt;/a&gt; (from NVIDIA blog)&lt;/p&gt;

&lt;p&gt;A researcher at NVIDIA,  &lt;a href=&quot;https://seung-kim.github.io/seungkim&quot;&gt;Seung Wook Kim&lt;/a&gt; (CS PhD
student at U. of Toronto), developed an AI model called the GameGAN, trained it with human
game play data, and used it to re-generate the PAC-MAN game.  According to the
&lt;a href=&quot;https://nv-tlabs.github.io/gameGAN&quot;&gt;GameGAN project website&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GameGAN is a generative model that learns to visually imitate a desired game by ingesting screenplay and keyboard actions during training.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This work was published as a CVPR 2020 paper (preprint to be published on May 25th, 2020).&lt;/p&gt;

&lt;p&gt;I am a huge fan of old classical games (Lode Runner is my favorite) and this is very
interesting!  Although I have not yet started looking into the area of ML/AI, this work
appears something that I’d definitely love to dig more into.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Google's Monolithic Repo</title>
   <link href="/blog/software/tools/2020/02/09/google-monorepo/"/>
   <updated>2020-02-09T00:00:00-08:00</updated>
   <id>/blog/software/tools/2020/02/09/google-monorepo</id>
   <content type="html">&lt;p&gt;How do you maintain source code of your project?  Of course, you probably use one of
version control software like git, svn, and Perforce.  Those off-the-shelf tools should
work for the most of personal and small/medium-sized projects.  As the scale and
complexity of the projects grow, however, you  may encounter practical issues on a daily
basis in different areas.  For example, git clone may take too much time, back-end CI
infrastructure may be a bottleneck when verifying new change sets (e.g., too slow, too
many false build failures), and developers may start noticing room for improvement in
their development workflow.  These  issues are essentially related to the scalability of
development environments, which can be asked with one simple question: 
&lt;em&gt;does your development environment scale?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not until recently did I ask the question to myself.  For the last project that I worked
on at work, we structured our repos using git submodules to accommodate certain build
scenario requirements.  This submodule-based modular repo structure enabled us to quickly
and independently develop each sub-project while the main project moves forward (I will
write about this experience later on a separate article).  For the current project,
though, it became part of our company’s monolithic source repository, which is shared
among all the engineers within the company.  As someone who was familiar with the
submodule-based multi-repo model, I was curious about the rationale of choosing the
monolithic repo model.  More importantly, I wanted to better understand the benefits and
implications of such a decision on not only in a short term (e.g., on engineers’
day-to-day development workflow) but also in a long(er) term (e.g., what it means to the
company after 10/20+ years).  Essentially, I was asking the question – &lt;em&gt;does it scale?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Coincidentally, I came across two interesting articles from Google Research around this topic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why Google Stores Billions of Lines of Code in a Single Repository (ACM 2016) [1]&lt;/li&gt;
  &lt;li&gt;Advantages and disadvantages of a monolithic repository: a case study at Google (ICSE-SEIP 2018) [2]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With an introduction to the Google scale (9 billion source files, 35 million commits, 86TB
of content, ~40k commits/workday as of 2015), the first article describes why Google chose
the monolithic-source-management strategy in 1999, how it has been working for Google,
what in-house tooling and custom infrastructural efforts they have made over the years to
enable streamlined trunk-based development workflows, and advantages and alternatives of
the strategy.  From the first article:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… Google has embraced the monolithic model due to its compelling advantages.  Most important, it supports:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Unified versioning, one source of truth&lt;/li&gt;
    &lt;li&gt;Extensive code sharing and reuse&lt;/li&gt;
    &lt;li&gt;Simplified dependency management&lt;/li&gt;
    &lt;li&gt;Atomic changes&lt;/li&gt;
    &lt;li&gt;Large-scale refactoring&lt;/li&gt;
    &lt;li&gt;Collaboration across teams&lt;/li&gt;
    &lt;li&gt;Flexible team boundaries and code ownership&lt;/li&gt;
    &lt;li&gt;Code visibility and clear tree structure providing implicit team namespacing&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second article is a survey-based case study where hundreds Google engineers were asked
about their experience with the mono-repo vs. multi-repo models and discusses pros and
cons of the mono-repo model.  The five key findings from the article are as follows (from
Sec. 5. Discussion):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The visibility of a monolithic repo is highly impactful.&lt;/li&gt;
  &lt;li&gt;Developer tools may be as important as the type of repo.&lt;/li&gt;
  &lt;li&gt;There is a tension between consistent style and tool use with freedom and flexibility of the toolchain.&lt;/li&gt;
  &lt;li&gt;There is a tension between having all dependencies at the latest version and having versioned dependencies.&lt;/li&gt;
  &lt;li&gt;Reducing cognitive load is important, but there are many ways to achieve this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Related to 3rd and 4th points, the paper points out that the multi-repo model brings more
flexibility for engineers to choose their own toolchains, provides more access control,
and enables stability.&lt;/p&gt;

&lt;p&gt;Although these two articles articulate the rationale and benefits of the mono-repo based
on Google’s experience, one key take-away for me is that the mono-repo model requires
substantial amount of engineering efforts on creating in-house tooling and custom
infrastructures to streamline the development workflow and activities such as code review,
sample code search, API auto-update, pre-commit CI verify jobs with impact analysis and
assessment, and so forth.  Without such heavy investment on infrastructure and tooling
support, the mono-repo model simply would not work.  Looking at Facebook’s Mercurial
extension [3] and Microsoft’s GVFS [4-7], this seems to be true for other companies that
adopted the mono-repo model but with different approaches/solutions&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Rachel Potvin and Josh Levenberg, “Why Google Stores Billions of Lines of Code in a
  Single Repository,” Communications of the ACM, July 2016, Vol. 59 No. 7, Pages 78-87
  (DOI: &lt;a href=&quot;http://dx.doi.org/10.1145/2854146&quot;&gt;10.1145/2854146&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Jaspan, Ciera, Matthew Jorde, Andrea Knight, Caitlin Sadowski, Edward K. Smith, Collin
  Winter, and Emerson Murphy-Hill, “Advantages and disadvantages of a monolithic
  repository: a case study at Google,” In Proceedings of the 40th International
  Conference on Software Engineering: Software Engineering in Practice, pp. 225-234.
  2018 (DOI: &lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/3183519.3183550&quot;&gt;10.1145/3183519.3183550&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Facebook: Mercurial extension https://engineering.fb.com/core-data/scaling-mercurial-at-facebook (Accessed: February 9, 2020)&lt;/li&gt;
  &lt;li&gt;Brian Harry, &lt;a href=&quot;https://devblogs.microsoft.com/bharry/scaling-git-and-some-back-story&quot;&gt;Scaling Git (February 3,
  2017)&lt;/a&gt;:
  &lt;a href=&quot;https://vfsforgit.org&quot;&gt;GVFS&lt;/a&gt; (Accessed: February 9, 2020)&lt;/li&gt;
  &lt;li&gt;Brian Harry, &lt;a href=&quot;https://devblogs.microsoft.com/bharry/the-largest-git-repo-on-the-planet&quot;&gt;The larget Git repo on the
  planet&lt;/a&gt; (May 24, 2017) (Accessed: February 9, 2020)&lt;/li&gt;
  &lt;li&gt;Brian Harry, &lt;a href=&quot;https://devblogs.microsoft.com/bharry/perf-results-on-scaling-git-on-vsts-with-gvfs&quot;&gt;Perf results on scaling Git on VSTS with
  GVFS&lt;/a&gt; (July 6, 2017) (Accessed: February 9, 2020)&lt;/li&gt;
  &lt;li&gt;Saeed Noursalehi,
  &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/learn/git/git-at-scale&quot;&gt;https://docs.microsoft.com/en-us/azure/devops/learn/git/git-at-scale&lt;/a&gt; (Accessed: February 9, 2020)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Review paper on robotic spinal surgery</title>
   <link href="/blog/robotics/2020/02/02/review-paper-spinal-surgery/"/>
   <updated>2020-02-02T00:00:00-08:00</updated>
   <id>/blog/robotics/2020/02/02/review-paper-spinal-surgery</id>
   <content type="html">&lt;p&gt;I recently came across a review paper on robot-assisted spinal surgeries from Stanford (published on November 7, 2019):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Marissa D’Souza, &lt;em&gt;et al.&lt;/em&gt;, “Robotic-Assisted Spine Surgery: History, Efficacy,
Cost, And Future Trends,” in Robotic Surgery: Research and Reviews, Vol. 2019:6 pp. 9-23.
(DOI: &lt;a href=&quot;https://doi.org/10.2147/RSRR.S190720&quot;&gt;10.2147/RSRR.S190720&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This paper briefly describes the history of minimally invasive surgery (MIS)
focusing on neurosurgery.  It presents some surgical robots that are currently
available in the market, including robots (SpineAssist, Renaissance, Mazor X)
from Mazor, the ROSA Spine from Zimmer Biomet Robotics, the Da Vinci from
Intuitive, and the Excelsius GPS from Globus Medical.  With a review of clinical
outcomes and accuracy, the paper discusses cost-benefit analysis followed by
room for future improvements.&lt;/p&gt;

&lt;p&gt;Decent reading for those who are interested in commercially available robots in
the area of neurosurgery.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Are you sure your software will not kill anyone?</title>
   <link href="/blog/safety/2020/01/29/your-software-will-not-kill-anyone/"/>
   <updated>2020-01-29T00:00:00-08:00</updated>
   <id>/blog/safety/2020/01/29/your-software-will-not-kill-anyone</id>
   <content type="html">&lt;p&gt;Yes, it may sound a bit bold, especially for those who work in medical robotics industry.
It is actually the title of an article recently published in the Communications of the ACM
(Vol 63, Issue 2, Feb 2020):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nancy Leveson, “Are you sure your software will not kill anyone?”, Commun. ACM 63, 2
(February 2020), 25–28. DOI: &lt;a href=&quot;https://doi.org/10.1145/3376127&quot;&gt;10.1145/3376127&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested in the topics around safety such as software system safety, safety
engineering, and dependable computing, you have probably heard of
&lt;a href=&quot;http://sunnyday.mit.edu&quot;&gt;Dr. Nancy Leveson&lt;/a&gt;.  She is a
Professor at Aeronautics and Astronautics/MIT and her research takes a systems approach to
safety, safety engineering, and software system safety.  Her work has been formulated as a
new model for safety, called the system-theoretic model of accidents (STAMP).
She is leading the &lt;a href=&quot;http://psas.scripts.mit.edu&quot;&gt;Partnership for Systems Approaches to Safety and Security (PSASS)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I first came across her name and her body of work when I started working on literature
review for my PhD thesis.  While digging through her research and publication, it was
relieving to me to realize safety is a “real” problem, not something that people talk
about at an abstract level and/or without substantial thinking around it.  The existing
body of work around safety in various domains confirmed that safety is still a challenging
topic both for academia and for industry, thereby validating the problem of my thesis in
medical robotics.&lt;/p&gt;

&lt;p&gt;In this short recent article, she briefly talks about some of the key concepts in safety,
discuss some of the most common misconceptions around software and safety, and wraps up
the article with a quick intro to her book – 
&lt;a href=&quot;https://www.amazon.com/Engineering-Safer-World-Systems-Thinking/dp/0262533693/ref=sr_1_1?crid=1A3QQ8DJ71NXC&quot;&gt;Engineering a Safer World&lt;/a&gt; – and PSASS.&lt;/p&gt;

&lt;p&gt;Here are the misconceptions listed in the article:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Misconception 1: Software itself can be unsafe.&lt;/li&gt;
    &lt;li&gt;Misconception 2: Reliable systems are safe; that is, reliability and safety are
essentially the same thing.  Reliability assessment can therefore act as a proxy for
safety.&lt;/li&gt;
    &lt;li&gt;Misconception 3: The safety of components in a complex system is a useful concept; that
is, we can model or analyze the safety of software in isolation from the entire system
design.&lt;/li&gt;
    &lt;li&gt;Misconception 4: Software can be shown to be safe by testing, simulation, or standard
formal verification.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the article, I got a sense of the need for her to straighten something up about
software system safety.  This article also reminded me of all the years back in Baltimore
reading and writing a bunch of articles on software system safety.&lt;/p&gt;

&lt;p&gt;For those who’d like to explore more on safety engineering and software system safety,
the following two books would be a good starting point:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Safeware-Computers-Nancy-G-Leveson/dp/0201119722/ref=sr_1_2?keywords=nancy+leveson&amp;amp;qid=1580308654&amp;amp;s=books&amp;amp;sr=1-2&quot;&gt;Safeware: System Safety and Computers&lt;/a&gt;: 
The first book from Nancy Leveson that I went through cover to cover.  A bit outdated
(published in 1995), but still contain a lot of great and fundamental materials.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Engineering-Safer-World-Systems-Thinking/dp/0262533693/ref=sr_1_1?crid=1A3QQ8DJ71NXC&quot;&gt;Engineering a Safer World&lt;/a&gt;:
The second book in my bookshelf.  More recently updated materials with modern concepts.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing Better Embedded Software</title>
   <link href="/blog/software/c++/2019/03/10/writing-better-embedded-software/"/>
   <updated>2019-03-10T20:04:54-07:00</updated>
   <id>/blog/software/c++/2019/03/10/writing-better-embedded-software</id>
   <content type="html">&lt;p&gt;I came across a video recording of a &lt;a href=&quot;https://isocpp.org/blog/2019/03/writing-better-embedded-software-dan-saks-keynote-meeting-embedded-2018&quot;&gt;key note talk by Dan
Saks&lt;/a&gt;
from Meeting Embedded 2018.  Dan Saks, who served as secretary of the ANSI
and ISO C++ standards committee, talks about embedded software development
around C and C++.  Some of the topics he addresses include the definition
of embedded systems, the barriers (in mindset) for embedded/C developers to
transition from C to C++, and his approaches to introducing C++ to embedded/C
developers based on his experience.&lt;/p&gt;

&lt;p&gt;This talk was interesting to me because he delineated the characteristics of
embedded systems, design considerations that embedded software developers
typically consider (e.g., power budget, thermal effects), and how/what embedded
software developers think.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ROBODOC® System</title>
   <link href="/blog/robotics/2016/12/31/robodoc/"/>
   <updated>2016-12-31T06:45:00-08:00</updated>
   <id>/blog/robotics/2016/12/31/robodoc</id>
   <content type="html">&lt;p&gt;When I decided to work on the software system safety as my PhD thesis topic, it
didn’t take long before I realized safety in the medical robotics domain had not
yet been formulated as a well-defined research problem.  Although virtually
all papers in the medical robotics domain mention (the importance of) safety, it
has been mostly considered in the application- or system-specific context,
rather than as a system property that requires systematic approaches.&lt;/p&gt;

&lt;p&gt;So I spent quite a bit of time – almost a year – for literature review in
various areas such as software engineering, component-based software
engineering, system safety engineering, safety- and mission-critical application
domains, dependable computing domain, and so on. Two major findings (I’ll write
another post that overviews those related domains later):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Within&lt;/em&gt; medical robotics, there is a lack of prior work that specifically
focus on the safety of medical robots.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Outside&lt;/em&gt; medical robotics, Safety has been already recognized as one of
crucial system properties and as such there is a substantial body of work
around it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This was a good news to me in that I had room for contributions, but at the same
time was not a good news because there were not much of prior work that I could
refer to for my research.&lt;/p&gt;

&lt;p&gt;Fortunately, there was one medical robot system, of which many aspects are
&lt;em&gt;relatively&lt;/em&gt; well documented and published in the academic medical robotics
literature: The &lt;strong&gt;ROBODOC® system&lt;/strong&gt; system, an orthopedic surgical robot system.
Starting from its history, the topics they cover include user-driven system
design requirements, an overall system architecture, design rationale, safety
design principles, and some of engineering details. Even though most of these
papers were published in the 90’s, I personally learned a lot from those
articles, which later became my primary resource for my own research on safety,
including my PhD dissertation. So I thought a list of those papers with the
history of the ROBODOC system may be useful for those who are curious about
ROBODOC, who are interested in safety in general, or who are (about to) working
on safety as a research topic. The list of the literature that I reviewed
includes Taylor &lt;em&gt;et al.&lt;/em&gt; (1990, 1991, 1994, 1996), Kazanzides &lt;em&gt;et al.&lt;/em&gt; (1992,
1993, 1995, 1996, 1999), Mittelstadt &lt;em&gt;et al.&lt;/em&gt; (1993, 1996), and Cain &lt;em&gt;et al.&lt;/em&gt;
(1993). For a complete list, please refer to the Reference section at the bottom
of this article.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;&lt;/strong&gt;&lt;/u&gt;:
This article is an excerpt of &lt;a href=&quot;https://drive.google.com/file/d/0BwGcEiVvK4n9RUJmSXhUYW90SG8/view&quot;&gt;my PhD dissertation&lt;/a&gt;
(Section 6.2.1), which was proofread by &lt;a href=&quot;http://smarts.lcsr.jhu.edu/people/peter-kazanzides/&quot;&gt;Dr. Peter Kazanzides&lt;/a&gt;
and &lt;a href=&quot;http://www.cs.jhu.edu/~rht&quot;&gt;Dr.  Russell H. Taylor&lt;/a&gt;. Dr. Kazanzides is a co-founder
of the Integrated Surgical System (ISS), a manufacturer of the ROBODOC system,
and was the Director of Engineering of ISS. Dr. Taylor designed and prototyped
an earlier version of the ROBODOC system for a veterinary orthopedic surgery at
the IBM Research in the late 80’s.&lt;/p&gt;

&lt;h2 id=&quot;overview-of-the-robodoc-system&quot;&gt;Overview of the ROBODOC System&lt;/h2&gt;

&lt;p&gt;The ROBODOC® system has been developed to increase the accuracy and efficacy of
surgical procedures such as cementless Total Hip Replacement (THR) surgery and
Total Knee Replacement (TKR) surgery by enabling surgeons to precisely specify
the desired prosthesis placement in a preoperative CT scan of the patient and
then use the robotic system to accurately machine the bone to achieve that plan.&lt;/p&gt;

&lt;p&gt;It began as a joint project between the University of California, Davis and IBM
Research. The canine system (alpha prototype) was developed for canine THR in a
well-controlled, supervised research environment, i.e., under the active
supervision of the developing engineers. It was first clinically used in 1990
for canine patients at a veterinary hospital in Sacramento, California and
performed canine surgeries. This alpha prototype went through fundamental
changes and improvements to evolve into a beta (investigational) medical device
that was operated by surgical teams –- without engineers –- for human clinical
trials at multiple clinical sites. The beta version of ROBODOC was the subject
of an FDA-authorized, multi-center clinical trial in the United States, and
performed over 200 surgeries at a hospital in Frankfurt, Germany. It was then
further developed as a commercial-level product to be used in Europe and this
required an architectural change from a centralized architecture to a
distributed architecture.&lt;/p&gt;

&lt;p&gt;The following figure shows the ROBODOC System. The two main components of the
ROBODOC System are the ORTHODOC™ Preoperative Planning System (ORTHODOC) and the
ROBODOC Surgical Assistant (ROBODOC). ORTHODOC allows the surgeon to develop a
preoperative plan that ROBODOC can execute. The two inputs to ORTHODOC are a
Computed Tomography (CT) scan of the patient’s femur and a set of implant models
based on data from the implant manufacturers. Using implant models and a
three-dimensional model of the femur constructed from the CT data, the surgeon
visually determines an appropriate implant model with its precise location. Once
the plan is finalized, the preoperative plan is recorded and transferred to
ROBODOC via a transfer medium (tape or CD).&lt;/p&gt;

&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;
&lt;img src=&quot;/assets/orthodoc.png&quot; class=&quot;kg-image&quot; /&gt;
&lt;figcaption&gt;&lt;b&gt;ORTHODOC&lt;/b&gt;: Preoperative Planning&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;
&lt;img src=&quot;/assets/robodoc.png&quot; class=&quot;kg-image&quot; /&gt;
&lt;figcaption&gt;&lt;b&gt;ROBODOC&lt;/b&gt;: Surgical Robot&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ROBODOC reads the preoperative plan from the transfer medium and machines a
cavity for the implant in the femur according to the plan. To precisely execute
the plan, it is required to register the patient’s femur in the preoperative
plan with the intraoperative physical reality (i.e., the robot’s workspace
coordinates). Calibration of the robot kinematic parameters and the cutting
tool’s dimensional parameters also play a vital role in achieving high
dimensional accuracy. Based on clinical input, the specification of the robot’s
placement accuracy (deviation from the preoperatively planned position) is less
than 1.0 mm, and that of the dimensional accuracy (deviation of the machined
shape from its ideal dimensions) is less than ±0.4 mm on a cross-section (or
±0.2 mm on each side).&lt;/p&gt;

&lt;h2 id=&quot;safety-features-of-robodoc&quot;&gt;Safety Features of ROBODOC&lt;/h2&gt;

&lt;p&gt;The principal safety requirements of ROBODOC were defined by a surgeon, who was a user of the system, as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;The robot should never “run away”&lt;/em&gt;: No single-mode hardware failure or system
  error should cause the application software to lose control of the robot
  motions.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;The robot should never exert excessive force on the patient&lt;/em&gt;: Any cutting
  force substantially more than needed means something may be wrong and the
  robot better stop its current motion.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;The robot’s cutter should stay within a pre-specified positional envelope
  relative to the volume being cut&lt;/em&gt;: A systematic positional shift in the
  placement or shape of the hole should be prevented.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;The surgeon must be in charge at all times&lt;/em&gt;: The system must provide the
  surgeon with timely information about its current status and the surgeon
  must be able to stop motions at any time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A set of safety features distributed throughout the system were designed to
achieve these principle safety requirements. The following presents a &lt;em&gt;partial&lt;/em&gt;
list of the safety features of ROBODOC based only on the &lt;em&gt;published, academic&lt;/em&gt;
literature.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;System integrity monitoring (with redundant sensors)&lt;/strong&gt;: The real-time
control loop periodically monitors system integrity, such as tolerance
checking of primary and redundant encoders at each joint, with the capability
to turn off the robot arm.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use of state variables for error handling&lt;/strong&gt; : State variables are defined
to represent application-specific procedural flow and are used for error or
exception handling.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dedicated processor for the safety system&lt;/strong&gt; : The safety system runs on a
separate processor to isolate it from errors in other subsystems and has a
direct hardware interface to power othe system.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Force/torque checks with two thresholds&lt;/strong&gt; : Force and torque feedback from
the force sensor are monitored against two thresholds, PAUSE (1.5 kg-f) and
STOP (3.0 kg-f). PAUSE halts all robot motion and turns off the cutter,
whereas STOP removes power from both the robot and the cutter.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speed limiter (low speed)&lt;/strong&gt;: The low-level software implements the speed
limiter. It operates on the output of the trajectory generation functions and
limits the robot’s speed and torque. The rationale of this safety feature is
that the surgical staff can stop the robot before any hazard occurs if the
robot is slow and weak.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Safety volume (dynamic constraints)&lt;/strong&gt;: During cutting, the software
verifies that the cutter tip is within a pre-planned safety volume, with a 3
mm margin for error. The safety volume is derived from the prosthesis
geometry, but is independent from the file containing the cutting paths.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Notification of exceptions to application&lt;/strong&gt; : Any reflex action initiated
by a safety system leads to an exception to the application which interrupts
the normal procedural flow and invokes a handler function for error
recovery.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Error detection&lt;/strong&gt; : Data integrity checks (e.g., if there is any corruption
of critical data), data rationality checks (e.g., if case-specific data are
reasonable), detection of procedural errors (e.g., if surgeons make
procedural errors that can compromise both safety and system performance).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Startup diagnostics&lt;/strong&gt; : During start up, all safety- and
performance-related components are verified to make sure that they are
functioning within specified tolerances.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;User oversight with emergency pause/stop&lt;/strong&gt; : An external custom pendant
with five buttons, including emergency pause and stop, helps surgeons to
interact with the system and a graphical display in the operating room
provides the current status of the surgical procedure.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;h3 id=&quot;robodoc-literature&quot;&gt;ROBODOC Literature&lt;/h3&gt;

&lt;p&gt;This is a list of the academic literature on the ROBODOC System that I have
reviewed with focus on its system design and safety features.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;R. H. Taylor, P. Kazanzides, B. Mittelstadt, and H. Paul. Redundant consistency checking in a precise surgical robot. In Proc. of the 12th Annual Intl. Conf. of the IEEE, pages 1933–1935, Nov. 1990.&lt;/li&gt;
  &lt;li&gt;R. H. Taylor, H. Paul, P. Kazanzides, B. Mittelstadt, W. Hanson, J. Zuhars, B. Williamson, B. Musits, E. Glassman, and W. Bargar. Taming the bull: Safety in a precise surgical robot. In Intl. Conf. on Advanced Robotics (ICAR), volume 1, pages 865–870, Jun. 1991.&lt;/li&gt;
  &lt;li&gt;P. Kazanzides, J. Zuhars, B. Mittelstadt, and R. Taylor. Force sensing and control for a surgical robot. In IEEE Intl. Conf. on Robotics and Automation (ICRA), volume 1, pages 612–617, May 1992.&lt;/li&gt;
  &lt;li&gt;P. Kazanzides, J. Zuhars, B. Mittelstadt, B. Williamson, P. Cain, F. Smith, L. Rose, and B. Musits. Architecture of a surgical robot. In IEEE Intl. Conf. on Systems, Man and Cybernetics, volume 2, pages 1624–1629, Oct. 1992.&lt;/li&gt;
  &lt;li&gt;B. Mittelstadt, P. Kazanzides, J. Zuhars, P. Cain, and B. Williamson. Robotic surgery: achieving predictable results in an unpredictable environment. In Intl. Conf. on Advanced Robotics (ICAR), volume 11, pages 367–372, 1993.&lt;/li&gt;
  &lt;li&gt;P. Cain, P. Kazanzides, J. Zuhars, B. Mittelstadt, and H. Paul. Safety considerations in a surgical robot. In Proc. of 30th Annual Rocky Mountain Bioengineering Symp., volume 29, page 291, Apr. 1993.&lt;/li&gt;
  &lt;li&gt;P. Kazanzides, B. Mittelstadt, J. Zuhars, P. Cain, and H. Paul. Surgical and industrial robots: Com- parison and case study. In Proc. of the Intl. Robots and Vision Automation Conf., pages 1019–1026, Detroit, MI, Apr. 1993.&lt;/li&gt;
  &lt;li&gt;R. H. Taylor, B. Mittelstadt, H. Paul, W. Hanson, P. Kazanzides, J. Zuhars, B. Williamson, B. Musits, E. Glassman, and W. Bargar. An image-directed robotic system for precise orthopaedic surgery. IEEE Trans. on Robotics and Automation, 10(3):261–275, Jun. 1994.&lt;/li&gt;
  &lt;li&gt;P. Kazanzides, B. Mittelstadt, B. Musits, W. Bargar, J. Zuhars, B. Williamson, P. Cain, and E. Carbone. An integrated system for cementless hip replacement. IEEE Engineering in Medicine and Biology Magazine, 14(3):307–313, May/Jun. 1995.&lt;/li&gt;
  &lt;li&gt;P. Kazanzides, P. W. Cain, and H. A. Wasti. Distributed architecture for a fail-safe robot system. In Proc. of the Signal Processing Applications Conference &amp;amp; Exhibition (DSPx), San Jose, CA, Mar. 1996.&lt;/li&gt;
  &lt;li&gt;R. H. Taylor, B. D. Mittelstadt, H. A. Paul, W. Hanson, P. Kazanzides, J. F. Zuhars, B. Williamson, B. L. Musits, E. Glassman, and W. L. Bargar. An Image-Directed Robotic System for Precise Orthopaedic Surgery, chapter 28, pages 379–396. Computer-Integrated Surgery. MIT Press, Cambridge, MA, 1996.&lt;/li&gt;
  &lt;li&gt;B. D. Mittelstadt, P. Kazanzides, J. F. Zuhars, B. Williamson, P. Cain, F. Smith, and W. L. Bargar. The Evolution of a Surgical Robot from Prototype to Human Clinical Use, chapter 29, pages 397–407. Computer-Integrated Surgery. MIT Press, Cambridge, MA, 1996.&lt;/li&gt;
  &lt;li&gt;P. Kazanzides. Robot Assisted Surgery: The ROBODOC (R) Experience. In Intl. Symp. on Robotics (ISR), volume 30, pages 281–286, Tokyo, Japan, 1999.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;articles-on-robodoc-safety&quot;&gt;Articles on ROBODOC Safety&lt;/h3&gt;

&lt;p&gt;In case you are interested in further information of the ROBODOC safety design, below are a couple additional articles for reference.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;M. Y. Jung. State-based Safety of Component-based Medical and Surgical Robot Systems. PhD thesis, The Johns Hopkins University, Baltimore, Maryland, USA, May. 2015.&lt;/li&gt;
  &lt;li&gt;M. Y. Jung, R. H. Taylor, and P. Kazanzides. Safety Design View: A conceptual framework for systematic understanding of safety features of medical robot systems. In IEEE Intl. Conf. on Robotics and Automation (ICRA), pages 1883–1888, 2014.&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 

</feed>
